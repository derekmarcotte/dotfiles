#!/bin/sh

plugin_repo() {
	local plugin="$1"

	case "$plugin" in
	# language-agnostic
	vim-sensible)     echo "git://github.com/tpope/vim-sensible.git" ;;
	vim-editorconfig) echo "https://github.com/editorconfig/editorconfig-vim" ;;
	vim-sync)         echo "https://github.com/eshion/vim-sync" ;;
	vim-tagbar)       echo "https://github.com/majutsushi/tagbar" ;;
	vim-nerdtree)     echo "https://github.com/scrooloose/nerdtree.git" ;;
	vim-ack)          echo "https://github.com/mileszs/ack.vim.git" ;;
	# language-specific
	vim-go)           echo "https://github.com/fatih/vim-go.git" ;;
	vim-go-explorer)  echo "https://github.com/garyburd/go-explorer" ;;
	vim-php-cs-fixer) echo "https://github.com/stephpy/vim-php-cs-fixer" ;;

	all)
		# all of the above
		echo "vim-sensible|vim-editorconfig|vim-sync|vim-tagbar|vim-nerdtree|vim-go|vim-go-explorer|vim-php-cs-fixer"
		return 1
		;;
	*) return 1 ;;
	esac

	return 0
}

plugin_dir() {
	local plugin="$1"
	case "$plugin" in
	# have to be special!
	vim-editorconfig) echo "editorconfig-vim" ;;
	vim-go-explorer)  echo "go-explorer" ;;
	vim-tagbar)       echo "tagbar" ;;
	vim-nerdtree)     echo "nerdtree" ;;
	vim-ack)          echo "ack.vim" ;;
	*)                echo "$plugin" ;;
	esac

	return 0
}

vimstall_pathogen() {
	local dir

	# https://github.com/tpope/vim-pathogen
	for dir in autoload bundle; do
		if [ ! -e "$dir" ]; then
			mkdir "$dir";
		fi
	done

	curl -SsLo autoload/pathogen.vim https://tpo.pe/pathogen.vim
}

vimstall_base() {
	local e

	for e in pathogen colors vim-sensible; do
		main "$e"
	done
}

vimstall_colors() {
	if [ ! -e "colors" ]; then
		mkdir colors
	fi

	(
		cd colors

		# https://github.com/tomasr/molokai
		curl -SsOJ "https://raw.githubusercontent.com/tomasr/molokai/master/colors/molokai.vim"

		# https://github.com/noahfrederick/vim-noctu
		curl -SsOJ "https://raw.githubusercontent.com/noahfrederick/vim-noctu/master/colors/noctu.vim"

		curl -SsOJ "http://www.vim.org/scripts/download_script.php?src_id=14049" 
	)
}

vimstall_update() {
	local dir

	if [ -d "autoload" ]; then
		echo "Updating pathogen..."
		vimstall_pathogen
	fi

	if [ -d "colors"  ]; then
		echo "Updating colors..."
		vimstall_colors
	fi

	if [ -d "bundle" ]; then
		for dir in bundle/*; do
			echo "Updating ${dir}..."
			(
				cd "$dir"
				git pull
			)
		done
	fi
}

vimstall_wipe() {
	local dir

	for dir in autoload bundle colors; do
		if [ -d "$dir" ]; then
			rm -rf "$dir"
		fi
	done
}

_vimstall_bundle() {
	local target="$1"
	if [ "$(echo "$target" | cut -c1-4)" != "vim-" ]; then
		echo "Invalid target $target"
		return 1
	fi

	local dir
	local repo

	if [ ! -e bundle ]; then
		echo "Pathogen not found, installing?"
		main "pathogen"
	fi

	(
		cd bundle

		dir="$(plugin_dir "$target")"
		if [ -d "$dir" ]; then
			(
				cd "$dir"
				git pull
			)
		else
			repo="$(plugin_repo "$target")"
			if ! [ -z "$repo" ]; then
				git clone "$repo"
			else
				echo "Could not find a repo matching $target"
				usage
			fi
		fi
	)
}

usage() {
	echo "$0 [base|pathogen|colors|update|$(plugin_repo "all")]"
	exit 1
}

main() {
	local target="$1"

	case "$target" in
	pathogen) vimstall_pathogen ;;
	update)   vimstall_update ;;
	colors)   vimstall_colors ;;
	base)     vimstall_base ;;
	wipe)     vimstall_wipe ;;
	vim-*)    _vimstall_bundle "$target" ;;
	*)        usage ;;
	esac
}

main "$@"
